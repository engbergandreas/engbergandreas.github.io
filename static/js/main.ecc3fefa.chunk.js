(this["webpackJsonpengbergandreas.github.io"]=this["webpackJsonpengbergandreas.github.io"]||[]).push([[0],{13:function(e){e.exports=JSON.parse('[{"id":"master_thesis","title":"Investigating the Chemical Cartography of the Galaxy Through Visualization","backgroundURL":"/images/placeholder640.png","categories":["programming","computer graphics"]},{"id":"interactive_canvas","title":"Interactive AI Canvas","backgroundURL":"/images/interactive_canvas/resultimg.png","categories":["programming","computer graphics","webb"]},{"id":"proceduralterrain","title":"Procedural Generated Terrain","backgroundURL":"/images/procedural_terrain/logo2.png","categories":["programming","computer graphics"]},{"id":"global_illumination","title":"Global Illumination","backgroundURL":"/images/global_illumination/logo.bmp","categories":["programming","computer graphics"]},{"id":"table_raid","title":"Table Raid","backgroundURL":"/images/table_raid/thumbnail.PNG","categories":["games","programming","computer graphics"]},{"id":"color_my_world","title":"Color My World","backgroundURL":"/images/color_my_world/logo.png","categories":["programming","games"]},{"id":"proceduraltrees","title":"Procedural Generated Trees","backgroundURL":"/images/procedural_trees/logo.png","categories":["programming","computer graphics"]},{"id":"facial_recognition","title":"Facial Recognition","backgroundURL":"/images/face_recognition/logo.png","categories":["programming"]},{"id":"modeling_and_animation","title":"Modeling and Animation","backgroundURL":"/images/placeholder640.png","categories":["programming","computer graphics"]},{"id":"cloth_simulation","title":"Cloth Simulation","backgroundURL":"/images/cloth/clothflag3.png","categories":["webb","programming"]},{"id":"matkoma","title":"MatKOMA","backgroundURL":"/images/matkoma/logo.png","categories":["programming","webb"]},{"id":"bobross","title":"Bob Ross 3D-Painting","backgroundURL":"/images/bob_ross/logo.jpg","categories":["computer graphics"]},{"id":"soundflight","title":"Sound Flight","backgroundURL":"/images/soundflight/logo.PNG","categories":["programming","games"]},{"id":"legionen","title":"Legionen","backgroundURL":"/images/legionen/logo2.PNG","categories":["programming","games"]},{"id":"setfinder","title":"Lego Set Finder","backgroundURL":"/images/setfinder/logo.PNG","categories":["webb"]}]')},24:function(e,t,n){e.exports=n(43)},29:function(e,t,n){},30:function(e,t,n){},43:function(e,t,n){"use strict";n.r(t);var a,r,i=n(0),o=n.n(i),l=n(20),c=n.n(l),s=(n(29),n(16)),m=n(2),u=(n(30),n(6)),d=n(1),g=d.a.div(a||(a=Object(m.a)(["\ndisplay: flex;\njustify-content: space-evenly;\nwidth: 375px;\n"]))),h=d.a.header(r||(r=Object(m.a)(["\n    position: absolute;\n    left: 0;\n    right: 0;\n"])));var p,f=function(){return o.a.createElement(h,null,o.a.createElement("nav",{className:"wrapper"},o.a.createElement(u.c,{exact:!0,activeClassName:"activePage",className:"wrapperChild",to:"/"},"Home"),o.a.createElement(g,null,o.a.createElement(u.c,{activeClassName:"activePage",className:"wrapperChild",to:"/projects"},"Projects"))))},b=d.a.footer(p||(p=Object(m.a)(["\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    color: #3C403D;\n    justify-content: center;\n    align-items: center;\n    background: #fff;\n    display: flex;\n    height: 10vh;\n    min-height: var(--gap);\n    font-size: 1.5em;\n\n    & a {\n        margin: 0 15px;\n    }\n"])));var E,v,w,y,k,x,j,T,O=function(){return o.a.createElement(b,null,o.a.createElement("a",{href:"https://www.linkedin.com/in/andreas-engberg/",target:"_blank",rel:"noopener noreferrer"},o.a.createElement("img",{src:"/images/linkedin.png",alt:"Linked in"})),o.a.createElement("a",{href:"https://github.com/engbergandreas",target:"_blank",rel:"noopener noreferrer"},o.a.createElement("img",{src:"/images/GitHub.png",alt:"GitHub profile"})),o.a.createElement("a",{href:"mailto:adde.engberg@gmail.com",target:"_blank",rel:"noopener noreferrer"},o.a.createElement("img",{src:"/images/mail.png",alt:"Mail"})))},M=n(3),I=d.a.div(E||(E=Object(m.a)(["\n    /*background: linear-gradient(90deg, #79938d, #496368);*/\n    background: var(--primary-background-color);\n    min-height: 89vh;\n    padding-top: var(--gap);\n    padding-bottom: var(--gap);\n    color: white;\n    \n\n    & a {\n        color: white;\n        border-color: white;\n    }\n"]))),_=d.a.div(v||(v=Object(m.a)(["\n    width: 65vw;\n    margin: 0 auto;\n\n    & p {\n        text-align: justify;\n    }\n"]))),A=I,L=d.a.div(w||(w=Object(m.a)(["\n    display: flex;\n    justify-content: space-evenly;\n    padding: 50px 0;\n    width: 90%;\n    margin: auto;\n"]))),R=d.a.div(y||(y=Object(m.a)(["\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(375px, 1fr));\n    gap: 15px;\n    padding-bottom: 50px;   \n    width: 90%;\n    margin: 0 auto;\n\n"]))),U=d.a.button(k||(k=Object(m.a)(["\n    height: 50px;\n    width: 200px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    /* border: 2px solid #3C403D; */\n    border: 0;\n    cursor: pointer;\n    color: #fff;\n    background: unset;\n    font-weight: bolder;\n    margin:5px;\n\n    &:hover {\n        background: rgb(0, 0, 0, 0.25);\n        color: #fff;\n    }\n\n    &:focus {\n        outline: none;\n    }\n\n    &.activeCategory {\n        border: 2px solid #fff;\n    }\n"]))),D=["SHOW ALL","GAMES","COMPUTER GRAPHICS","PROGRAMMING","WEBB"];var C=d.a.div(x||(x=Object(m.a)(['\n    background: white;\n    overflow: hidden;\n    position: relative;\n\n\n    &:before {\n        content: "";\n        padding: 0 0px 60% 0; /* Adjust height of the cards */ \n        display: block;\n    }\n']))),P=d.a.img(j||(j=Object(m.a)(["\n    background: white;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n"]))),S=d.a.div(T||(T=Object(m.a)(["\n    background: #07145200;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    color: white;\n    font-size: 2.5em;\n    font-weight: 600;\n    transition: 0.4s ease;\n    opacity: 0;\n\n    &:hover {\n        background: #0714528c;\n        background: #00000061;\n        opacity: 1;\n    }\n"])));function G(e){var t=e.title,n=e.backgroundImg;"url(".concat(n,")");return o.a.createElement(C,null,o.a.createElement(P,{src:n}),o.a.createElement(S,null,o.a.createElement("span",null,t)))}var N=function(e){var t=e.selectedCat,n=e.onClickFunction,a=e.projects,r=Object(M.g)();function i(){return o.a.createElement(L,null,D.map((function(e,a){return o.a.createElement(U,{key:a,className:e===t?"activeCategory":"buttonAnimation",onClick:function(){return n(e)}},e)})))}return o.a.createElement(A,null,o.a.createElement(i,null),o.a.createElement(R,null,a.map((function(e){return o.a.createElement(u.b,{className:"",style:{},key:e.id,to:"".concat(r.url,"/").concat(e.id)},o.a.createElement(G,{title:e.title,backgroundImg:e.backgroundURL}))}))))};var W=function(){return o.a.createElement("h1",null,"From portfolio")};var B,F=function(){return o.a.createElement("h1",null,"From about")},z=d.a.a(B||(B=Object(m.a)(["\n    color: #000;\n    border-bottom: 1px solid black;\n"])));var H,Y,K,q,V,J=function(e){var t=e.reference,n=e.text;return o.a.createElement(z,{href:t},n)},X=d.a.div(H||(H=Object(m.a)(["\n    display: flex;\n    align-items: center;\n    padding: 25px 0 0 100px;\n"]))),Q=d.a.img(Y||(Y=Object(m.a)(["\n    height: 300px; \n    width: 300px;\n    bakground: white;\n    border-radius: 50%;\n"]))),Z=d.a.h1(K||(K=Object(m.a)(["\n    margin: 0;\n    font-size: 2.8em;\n    letter-spacing: -2px;\n    line-height: 55px;\n"]))),$=d.a.div(q||(q=Object(m.a)(["\n    width: 50%;\n    margin-top: 50px;\n    margin-left: 450px;\n"]))),ee=d.a.div(V||(V=Object(m.a)(["\n    margin: 0;\n    margin-left: 50px;\n    text-align: center;\n"])));var te=function(){return o.a.createElement(A,null,o.a.createElement(X,null,o.a.createElement(Q,{src:"../images/me.png"}),o.a.createElement(ee,null,o.a.createElement(Z,null,"Andreas Engberg"),o.a.createElement("div",null,"Rolig * Skojig * Kul"))),o.a.createElement($,null,o.a.createElement("p",null,"Hi! I am Andreas Engberg and currently studying my 4:th year in  MSc in Media Technology and Engineering at Link\xf6pings University. I am passionate coder with extra love for computer graphic, image processing & analysis and SFX.",o.a.createElement("br",null),"I'm focusing my master profile towards courses which will further my competens within C++ programming, computer graphics techniques, machine learning & AI. You can find the complete list of all courses on my ",o.a.createElement(J,{reference:"https://www.linkedin.com/in/andreas-engberg/",text:"LinkedIn profile"}),"."),o.a.createElement("p",null,"Here you will find some of the projects I have worked on during my time at Link\xf6pings University as well as some of my personal projects during my spare time. This site is very much a work in progress and Im continuously updating the projects descriptions. My goal is that every project listed will have a blog type information about the development, thought process or problems that occured or otherwise had to be solved."),o.a.createElement("p",null,"You can checkout my projects ",o.a.createElement(u.c,{to:"/projects"}," here"))))};var ne,ae,re=function(){return o.a.createElement("h1",null,"Whoopise, it seems that url does not exists!")},ie=n(13),oe=d.a.div(ne||(ne=Object(m.a)(["\ndisplay: flex;\njustify-content: ",";\nmargin: 15px 0;\n"])),(function(e){return e.isTop?"start":"center"})),le=d.a.div(ae||(ae=Object(m.a)(["\nborder: 2px solid #3C403D;\nheight: 50px;\nwidth: 200px;\nmargin: ",";\ndisplay: flex;\njustify-content: center;\nalign-items: center;\ncolor: #3C403D;\nfont-size: larger;\nfont-weight: 600;\n\n&:hover {\n    background: #f6f8fa;\n}\n"])),(function(e){return e.isTop?"0 0 0 15px":"0 "}));var ce,se=function(e){var t=e.top,n=void 0!==t&&t;return o.a.createElement(oe,{isTop:n},o.a.createElement(u.b,{to:"/projects"},o.a.createElement(le,{isTop:n},"Back to all projects")))},me=d.a.div(ce||(ce=Object(m.a)(["\n    text-align: center;\n    margin: 5vh 0;\n\n    & h1 {\n        font-size: 3.5em;\n        line-height: 0.9em;\n        margin: 0;\n    }\n\n    & h2 {\n        margin: 0;\n    }\n"])));var ue,de,ge,he=function(e){var t=e.title,n=e.subtitle;return o.a.createElement(me,null,o.a.createElement("h1",null," ",t," "),o.a.createElement("h2",null," ",n," "))},pe=d.a.figure(ue||(ue=Object(m.a)(["\n    display: table;\n    margin: 0 auto;\n"]))),fe=d.a.img(de||(de=Object(m.a)(["\n    max-width: 100%;\n    display: block;\n    margin: 0 auto;\n"]))),be=d.a.figcaption(ge||(ge=Object(m.a)(["\n    display: table-caption;\n    caption-side: bottom;\n    color: gray;\n    font-size: small;\n"])));var Ee,ve,we=function(e){var t=e.source,n=e.description;return o.a.createElement(pe,null,o.a.createElement(fe,{src:t,alt:n}),o.a.createElement(be,null,n))},ye=d.a.div(Ee||(Ee=Object(m.a)(["\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    margin: 15px 0;\n"]))),ke=d.a.div(ve||(ve=Object(m.a)(["\n    border: 2px solid #3C403D;\n    /*border: 1px solid #e1e4e8;*/\n    height: 60px;\n    width: 110px;\n    margin: 0 5px;\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    color: #3C403D;\n    font-size: larger;\n    font-weight: 600;\n\n    &:hover {\n        background: #f6f8fa;\n    }\n"])));var xe=function(e){var t=e.demo,n=e.code;return t&&n?o.a.createElement(ye,null,o.a.createElement(ke,{as:"a",href:t,target:"_blank"},"Demo"),o.a.createElement(ke,{as:"a",href:n,target:"_blank"},"Code")):t?o.a.createElement(ye,null,o.a.createElement(ke,{as:"a",href:t,target:"_blank"},"Demo")):o.a.createElement(ye,null,o.a.createElement(ke,{as:"a",href:n,target:"_blank"},"Code"))};var je,Te=function(){return o.a.createElement(A,null,o.a.createElement(se,{top:!0}),o.a.createElement(he,{title:"CLOTH SIMULATION",subtitle:"University project created spring 2021"}),o.a.createElement(_,null,o.a.createElement("h2",null,"SUMMARY"),o.a.createElement("p",null,"The cloth simulation was a project done in the course 'Modeling Course (TNM085)' at Link\xf6pings University during 6\xbd weeks by a group of 4 people. The purpose was to simulate a physically based model of their own choosing. The model was built using a mass-spring system in a grid like fashion. The acting forces are formulated for each mass and Eulers method and Runge Kutta 4 are used to simulate the cloths movement. In the project we first implemented a simplified 2D version in Matlab and a Simulink model was developed. Later on the system was further implemented in JavaScript using P5.js and WebGL for visualization and texturing, Perlin noise was used to simulate the wind acting on the cloth."),o.a.createElement(we,{source:"../images/cloth/clothsystem.png",description:""}),o.a.createElement(xe,{code:"https://github.com/engbergandreas/cloth-simulation",demo:"https://engbergandreas.github.io/cloth-simulation/"}),o.a.createElement("h1",{style:{textAlign:"center"}},"Implementation"),o.a.createElement("h2",null,"Model"),o.a.createElement("p",null,"Our model was built as a m x n grid of particles with a mass which are connected by springs and dampers according to the image below. The idea comes from Xavier Provot using structural, shear and flexion springs. The structural springs rejects compression and traction, shear springs helps maintain structure and the flexion springs resists unnatural folding."),o.a.createElement(we,{source:"../images/cloth/mass-spring-system.png",description:"Graphical presentation of the mass-spring system"}),o.a.createElement("p",null,"Every frame we study the particles position and calculate the force on each particle for the next frame. The force on a single particle is controlled by Newtons second law of motion, it consists of both internal and external forces. The internal forces are: spring force according to Hookes law and a linear damping force, while the external force consist of gravity and a linear wind force using perlin noise to simulate random movement that affect the cloth."),o.a.createElement("p",null,"We began by implementing a simulink model and ran some simulations in MATLAB to make sure that our model was built correctly. These simulation were made using a simplified model with less springs and particles compared to the final version. Using MATLAB plots and comparing them to the plots from simulink gave us confidence that our model was infact correct."),o.a.createElement("p",null,"We then began the process of visualizing our model using P5.js. We start by drawing a grid of particles and connected them to their neighbors. Then we had to redo the physics implementation we had previously done in MATLAB. However here we encountered some problems when calculating these cloth forces. What we did first was incorrectly calculating each particle current force and applied it to the particle in the same loop, this gave us very wierd results since the neighboring particles were now being calculated using both old and new force data. To overcome this we first calculate the current force of every particle using the data from the previous frame, then we loop over every particle again this time calculating the acceleration, velocity and position for the next frame."),o.a.createElement("p",null,"We implemented a functional UI for the user to change the parameters of the cloth to see how they influence the simulation. These include changing the time step of the integration method, weight of the particles, the spring constants and damping constant. Furthermore we gave the option of choosing integration methods as a way to compare Euler and RK4 method. Due to Euler integration being a very simple method, there are some values that are unstable using this method compared to RK4 (Note that there are values that make RK4 unstable as well). This also gave the need for a reset button.",o.a.createElement("br",null),"Finally we added a texture to our cloth. Using the particles placement in the grid as their vertex position we create a triangle strip using the neighboring particles. These are then UV mapped onto our texture."),o.a.createElement(we,{source:"../images/cloth/textureflag.png",description:""}),o.a.createElement("br",null),o.a.createElement(we,{source:"../images/cloth/textureflag2.png",description:""}),o.a.createElement(se,null)))},Oe=d.a.div(je||(je=Object(m.a)(["\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: baseline;\n\n    & figure {\n        //margin: 15px;\n        margin: 0 5px;\n        max-width: 49%;\n\n    }\n\n    @media (max-width: 1500px) {\n        & figure {\n            max-width: 100%;\n        }\n    }\n"])));var Me,Ie=function(e){var t=e.source1,n=e.source2,a=e.description1,r=e.description2;return o.a.createElement(Oe,null,o.a.createElement(we,{source:t,description:a}),o.a.createElement(we,{source:n,description:r}))};d.a.video(Me||(Me=Object(m.a)(["\n    width: 100%;\n    height: auto;\n\n"])));var _e,Ae,Le=d.a.div(_e||(_e=Object(m.a)(["\n    position: absolute;\n    left: 0;\n    font-style: italic;\n    padding: 25px;\n"]))),Re=d.a.ul(Ae||(Ae=Object(m.a)(["\n    margin: 0;\n    padding: 0;\n"])));var Ue,De=function(e){var t=e.typeinfo;return o.a.createElement(Le,null,o.a.createElement(Re,{type:"circle"},t.map((function(e){return o.a.createElement("li",{key:e},e)}))))},Ce=d.a.div(Ue||(Ue=Object(m.a)(["\n    overflow: hidden;\n    padding-bottom: 56.25%;\n    position: relative;\n    height: 0;\n    margin: 16px 0;\n    \n    & iframe {\n        left: 0;\n        top: 0;\n        height: 100%;\n        width: 100%;\n        position: absolute;\n    }\n\n"])));var Pe=function(e){var t=e.embedID;return o.a.createElement(Ce,null,o.a.createElement("iframe",{width:"853",height:"480",src:"https://www.youtube.com/embed/".concat(t),frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,title:"Embedded youtube"}))};var Se=function(){return o.a.createElement(A,null,o.a.createElement(se,{top:!0}),o.a.createElement(he,{title:"TABLE RAID",subtitle:"Bachelor project created spring 2021"}),o.a.createElement(_,null,o.a.createElement(De,{typeinfo:["VR","Multiplayer","Unity"]}),o.a.createElement("h2",null,"SUMMARY"),o.a.createElement("p",null,"Table Raid is a gesture based VR game created in 'Media Technology - Bachelor Project TNM094' at Link\xf6pings University during 12 weeks by a group of 5 people ",o.a.createElement(J,{reference:"https://www.linkedin.com/in/jonathan-andersson-43488a209/",text:"Jonathan Andersson"}," "),", ",o.a.createElement(J,{reference:"https://www.linkedin.com/in/wilma-axelsson-862b09177/",text:"Wilma Axelsson"}),", ",o.a.createElement(J,{reference:"",text:"Johanna Folde"}),", and ",o.a.createElement(J,{reference:"https://www.linkedin.com/in/viktor-carlsson-6885b8164/",text:"Viktor Carlsson"}),". The main focus of the course was to create a larger project and gain experience in system development and agile development.",o.a.createElement("br",null),"Ill present those parts of the project that I was most involved with which include general game design, VR integration, gesture recognition system, abilities system and the multiplayer aspect."),o.a.createElement("h2",null,"Demo video"),o.a.createElement(Pe,{embedID:"XBPeDu6h5gk"}),o.a.createElement(xe,{code:"https://github.com/jonan270/gesture-based-game/tree/Beta2.0"}),o.a.createElement("h3",null,"Game design"),o.a.createElement(we,{source:"../images/table_raid/composite.png",description:"User performing a gesture and ability."}),o.a.createElement(Ie,{source1:"",description1:"",source2:"",description2:""}),o.a.createElement("h3",null,"Gesture recognition"),o.a.createElement(we,{source:"../images/table_raid/gesture_new.PNG",description:"User performing a gesture."}),o.a.createElement("h3",null,"Abilities system"),o.a.createElement("h3",null,"Multiplayer"),o.a.createElement(se,null)))};var Ge=function(){return o.a.createElement(A,null,o.a.createElement(se,{top:!0}),o.a.createElement(he,{title:"MATKOMA",subtitle:"University project created fall 2020"}),o.a.createElement(_,null,o.a.createElement("h2",null,"SUMMARY"),o.a.createElement(xe,{code:"https://github.com/engbergandreas/matkoma",demo:"https://3djakob.github.io/matkoma/"}),o.a.createElement(we,{source:"../images/matkoma/overview.png",description:"Preferences page"}),o.a.createElement(se,null)))};var Ne=function(){return o.a.createElement(A,null,o.a.createElement(se,{top:!0}),o.a.createElement(he,{title:"SOUND FLIGHT",subtitle:"University project created fall 2020"}),o.a.createElement(_,null,o.a.createElement("h2",null,"SUMMARY"),o.a.createElement("p",null),o.a.createElement(xe,{code:"https://github.com/engbergandreas/SoundFlight"}),o.a.createElement(se,null)))};var We=function(){return o.a.createElement(A,null,o.a.createElement(se,{top:!0}),o.a.createElement(he,{title:"LEGIONEN - THE GAME",subtitle:"Individual project created 2019"}),o.a.createElement(_,null,o.a.createElement("h2",null,"SUMMARY"),o.a.createElement("p",null),o.a.createElement(xe,{code:"https://github.com/engbergandreas/Legionen-Webbsida",demo:"https://legionen.nu/arkiv/2019/"}),o.a.createElement(se,null)))};var Be=function(){return o.a.createElement(A,null,o.a.createElement(se,{top:!0}),o.a.createElement(he,{title:"SETFINDER",subtitle:"University project created fall 2018"}),o.a.createElement(_,null,o.a.createElement("h2",null,"SUMMARY"),o.a.createElement("p",null),o.a.createElement(xe,{code:"https://github.com/engbergandreas/SetFinder",demo:"http://www.student.itn.liu.se/~anden561/Avslutade%20kurser/TNMK30%20Projekt%202019/"}),o.a.createElement(se,null)))},Fe=n(9);var ze=function(){return o.a.createElement(A,null,o.a.createElement(se,{top:!0}),o.a.createElement(he,{title:"PROCEDURAL GENERATED TERRAIN",subtitle:"University project created winter 2021"}),o.a.createElement(_,null,o.a.createElement(De,{typeinfo:["OpenGL","Real-time rendering","Procedural","Frustum culling","CPU threading","LOD"]}),o.a.createElement("h2",null,"SUMMARY"),o.a.createElement("p",null,"In this project we created an endless procedurally generated terrain in OpenGL using multiple Perlin noise layers (FBM) to create an interesting environment. We implemented techniques such as frustum culling, discrete level of detail (LOD) and CPU threading to improve real time rendering. This project was part of the course Advanced Game Programming (TSBK03) at Link\xf6ping's University and was created by me and ",o.a.createElement(J,{reference:"https://github.com/mansaronsson",text:"M\xe5ns Arronsson"})),o.a.createElement(we,{source:"../images/procedural_terrain/result.png",description:""}),o.a.createElement(xe,{code:"https://github.com/engbergandreas/ProceduralGeneratedTerrain"}),o.a.createElement("h1",{style:{textAlign:"left"}},"Implementation"),o.a.createElement("h2",null,"Terrain"),o.a.createElement("p",null,"The endless terrain was created as an unevenly sized grid of equally large chunks. Each chunk consisted of a mesh of vertices with equal spacing containing the terrain data. We define the triangle strips as shown in the image below. We use a skirt at the end of each chunk to hide artifacts between neighboring chunks of different LOD. The height of any given vertex is computed using Fractal Brownian Motion (FBM), we used six octaves of Perlin Noise where each octave doubles the frequency and halves the amplitude."),o.a.createElement(we,{source:"../images/procedural_terrain/grid.png",description:"Underlying terrain structure"}),o.a.createElement("h3",null,"Normals"),o.a.createElement("p",null,"The normal at each vertex is computed by considering all connected triangles, we compute an average weighted sum of all connected triangle normals where the area of the triangle acts as its weight. For non-edge vertices we know all neighboring vertices lie in the same terrain chunk. However, for edge vertices there can be up to three vertices in a neighbor chunk. Instead of doing an expensive search for those vertex indices we opted to generate fake vertices for those missing like shown in the left figure below. This is done to create smooth surface normals along the edges of neighboring chunks and avoid artifacts as shown the image below."),o.a.createElement(Ie,{source1:"../images/procedural_terrain/fakevertex.png",description1:"Fake vertices are generated to compute the correct normal for yellow vertex.",source2:"../images/procedural_terrain/normalcomparision.png",description2:"Comparision showing the artifacts that arise when not computing edge normals correctly."}),o.a.createElement("h3",null,"Frustum culling"),o.a.createElement("p",null,"To improve performance, we implemented frustum culling to only render chunks that are visible to the camera. We do this by checking if the bounding of the chunk is inside the camera frustum, visualized in green. If the bounding box is outside the frustum, we can be sure the chunk is not visible and we can skip rendering it. We implemented culling on the CPU in the world coordinate system. Only two of the eight vertices on the AABB needed to be tested against each camera plane. These vertices were called ",o.a.createElement("i",null,"p-vertex")," and ",o.a.createElement("i",null,"n-vertex"),". The p-vertex was given by the point furthest in the positive direction i.e., normal of the tested camera plane. The n-vertex was given by the point furthest in the negative direction. The two vertices can efficiently be retrieved using the signs of the x, y- and z-component of the plane normal using a look-up table."),o.a.createElement(we,{source:"../images/procedural_terrain/bounding_box.PNG",description:"Result from culling terrain, chunks outside camera frustum (white lines) are not drawn."}),o.a.createElement("h3",null,"Discrete level of detail"),o.a.createElement("p",null,'We implemented discrete LOD by creating several copies of a chunk with fewer vertices per level. Every level used half the number of vertices from the previous level and vertices are "reused" between levels. Level one visits every vertex in the grid while level two and three visits every second and every fourth vertex respectively, see left figure below. The number of vertices in the grid was ',o.a.createElement(Fe.InlineMath,null,"n_{lod} =  (n - 1) / lod + 1")," where n is the base number of vertices in the grid and ",o.a.createElement(Fe.InlineMath,null,"lod = 1, 2, ..., k")," is the number of levels a chunk have. For k levels, n must be chosen so that it fulfils two criterion; n - 1 must be divisible by ",o.a.createElement(Fe.InlineMath,null,"2^{k-1}"),"and chosen such that ",o.a.createElement(Fe.InlineMath,null,"n = 2^{k-1} \\cdot b + 1")," with factor b = [1, inf) determining the number of columns in the lowest level. The LOD chunks were stored as a pointer inside the chunk class. We used the distance between the chunk and camera to chose which LOD-chunk to render. The right figure below shows the different LOD from green (most detailed) to red (least detailed)."),o.a.createElement(Ie,{source1:"../images/procedural_terrain/lodvertices.png",description1:"Discrete LOD for 3 levels, showing the stride between vertices.",source2:"../images/procedural_terrain/lod.PNG",description2:"LOD visualized by color, green most detailed to red least detailed with respect to distance from camera."}),o.a.createElement("h3",null,"Multi-threading"),o.a.createElement("p",null,"Creating the terrain was a computationally expensive task and we wanted to improve the performance by using multiple threads. This was the first time any of us had worked with threading, so the implementation was hacked together to make it work and is not very elegant. Chunks were generated on detached threads to avoid blocking the main thread and render loop. Working with threads and OpenGL was a bit tricky and the solution we came up with was to generate all geometry data on the thread add it to a render queue and bake them on the main thread to create correct VAO and VBO bindings.  Quick successive movements outside of chunks, e.g., crossing a chunk corner or leaving and quickly returning to a chunk, could trigger chunks to be generated in the wrong order. This made the chunk grid update incorrectly. We solved this by adding a movement queue and only starting to generate chunks of a movement when all chunks from the previous movement had finished."),o.a.createElement("h3",null,"Results"),o.a.createElement("p",null,"The project culminated in a program that boasts endless terrain generation. Object culling resulted in a 60% boost in frame rate, alongside LOD which decreased rendering time by up to 5.5 times. To achieve this, we constructed a 17 x 17 grid of chunks, each containing roughly 26,000 vertices and 5 LOD levels. We experimented with various settings on an Intel i5 8th gen processor with integrated graphics. With both LOD and frustum culling enabled, we were able to achieve 600-1100 fps. Turning culling off while leaving LOD on still netted us a solid 200-400 FPS. In contrast, using culling alone without LOD resulted in around 150-250 FPS, while disabling both settings gave us a mere 30 FPS, roughly 95% slower than with both features enabled.",o.a.createElement("br",null)," Mission successful!"),o.a.createElement(se,null)))};var He=function(){return o.a.createElement(A,null,o.a.createElement(se,{top:!0}),o.a.createElement(he,{title:"PROCEDURAL GENERATED TREES",subtitle:"Individual university project created fall 2021"}),o.a.createElement(_,null,o.a.createElement("h2",null,"SUMMARY"),o.a.createElement(we,{source:"../images/procedural_trees/result.png",description:"Procedural trees generated"}),o.a.createElement(xe,{code:"https://github.com/engbergandreas/ProceduralGeneratedTrees"}),o.a.createElement("h3",null,"Procedural biomes"),o.a.createElement(Ie,{source1:"../images/procedural_trees/heatmap.png",description1:"Heat map visualized over terrain",source2:"../images/procedural_trees/wetmap.png",description2:"Moisture map visualized over terrian"}),o.a.createElement("h3",null,"Tree generation"),o.a.createElement("h3",null,"Procedural tree placement"),o.a.createElement(we,{source:"../images/procedural_trees/possion.png",description:"Possion disk sampling"}),o.a.createElement(Ie,{source1:"../images/procedural_trees/jitter.png",description1:"Jittered grid",source2:"../images/procedural_trees/random.png",description2:"Random points generated"}),o.a.createElement("p",null,"Images taken from ",o.a.createElement(J,{reference:"http://devmag.org.za/2009/05/03/poisson-disk-sampling/",text:"Dev.Mag"})),o.a.createElement(we,{source:"../images/procedural_trees/validation.png",description:"Tree validation of the terrain"}),o.a.createElement(se,null)))};var Ye=function(){return o.a.createElement(A,null,o.a.createElement(se,{top:!0}),o.a.createElement(he,{title:"COLOR MY WORLD",subtitle:"Individual university project created fall 2021"}),o.a.createElement(_,null,o.a.createElement("h2",null,"SUMMARY"),o.a.createElement("p",null,"Color My World is an individual game project that was made in Unity for the course 'Design & Programming of Compute Games' (TDDD23) in about three weeks time. The aim of the project was to create a prototype game with focus on game deisgn, learnability, communication, player progress and skill."),o.a.createElement("p",null,"Color My World is a 2D puzzle platform game, the player reside in a"),o.a.createElement(Pe,{embedID:"_tLCKDe1jJI"}),o.a.createElement(xe,{code:"https://github.com/engbergandreas/ColorMyWorld2D"}),o.a.createElement("p",null,"The core game mechanic of the game is the color gun."),o.a.createElement(se,null)))};var Ke=function(){return o.a.createElement(A,null,o.a.createElement(se,{top:!0}),o.a.createElement(he,{title:"FACE RECOGNITION",subtitle:"University project created fall 2021"}),o.a.createElement(_,null,o.a.createElement("h2",null,"SUMMARY"),o.a.createElement("p",null),o.a.createElement(xe,{code:"https://github.com/engbergandreas/FacialRecognition"}),o.a.createElement("h3",null,"Finding eyes"),o.a.createElement("h3",null,"Fisherfaces"),o.a.createElement(we,{source:"../images/face_recognition/fisherfaces.png",description:""}),o.a.createElement(se,null)))};n(42);var qe=function(){return o.a.createElement(A,null,o.a.createElement(se,{top:!0}),o.a.createElement(he,{title:"GLOBAL ILLUMINATION",subtitle:"University project created fall 2021"}),o.a.createElement(Fe.BlockMath,null," L(x \\leftarrow \\omega) = L_{e}(x \\leftarrow \\omega) + \\int_{\\omega_{1}} f_{r}(x_{1}, -\\omega,\\omega_{1}) L(x_{1} \\leftarrow \\omega_{1})cos(\\theta_{1})d\\omega_{1}"),o.a.createElement(_,null,o.a.createElement(De,{typeinfo:["C++","Global illumination"]}),o.a.createElement("h2",null,"SUMMARY"),o.a.createElement("p",null,"In this project we created a Monte-Carlo ray tracer to simulate global illumination of a simple scene. The ray tracer was implemented in C++ using a binary tree structure that supports reflection of both specular and lambertian reflections. This project was part of the course Global Illumination and Rendering (TNCG015) at Link\xf6ping's University and was created by me and ",o.a.createElement(J,{reference:"https://www.linkedin.com/in/peder-dromberg-518732193/",text:"Peder Dromberg"}),"."),o.a.createElement(we,{source:"../images/global_illumination/result.bmp",description:""}),o.a.createElement(xe,{code:"https://github.com/engbergandreas/RayTracer"}),o.a.createElement("h3",null,"The scene"),o.a.createElement("h3",null,"Intersection with objects"),o.a.createElement("h3",null,"Reflection"),o.a.createElement("h3",null,"Ray tree"),o.a.createElement(se,null)))};var Ve=function(){return o.a.createElement(A,null,o.a.createElement(se,{top:!0}),o.a.createElement(he,{title:"3D PAINTING - BOB ROSS",subtitle:"University project created spring 2020"}),o.a.createElement(_,null,o.a.createElement("h2",null,"SUMMARY"),o.a.createElement("p",null,"The Bob Ross 3D painting was a 5-man group project made in Blender for ththe course '3-D Computer Graphics' (TNM061). In this project we were to explore different techniques in computer graphics and could freely choose what to do. We decided to make a 3D rendering of one of Bob Ross famous paintings. We split the scene into smaller components where each and everyone was responsible for modelling and texturing their respective parts. I created the left most tree and the water. This was the first time I worked with 3D modelling and Blender."),o.a.createElement(Pe,{embedID:"W2x3ZlnKtjg"}),o.a.createElement("h3",null,"Tree"),o.a.createElement("p",null,"The tree was built by extruding the default cube into a tree looking shape, the leaves were then added using a particle system. The position of the leaves was controlled by weight painting the branches of the tree."),o.a.createElement(we,{source:"../images/bob_ross/logo.jpg",description:"Final result"}),o.a.createElement("h3",null,"Water"),o.a.createElement("p",null,"We opted to use a shader for the water simulation as this was originally supposed to be a still image. The water was made from scratch using the node system in Blender. The goal was to create as realistic a water effect as possible, it has key features such as correct index of refraction, reflection, and depth using the volume absoption and volume scatter nodes. By adding a noise texture to the water we can make it look more alive and even further realistic as well as adding animation to the water by key-framing the z-component. The image below shows the nodes used and the result in a test environment."),o.a.createElement(Ie,{source1:"../images/bob_ross/water_nodes.png",description1:"Shader nodes to create water effect.",source2:"../images/bob_ross/water.png",description2:"Rendered water in test scene."}),o.a.createElement(se,null)))};var Je,Xe=function(){return o.a.createElement(A,null,o.a.createElement(se,{top:!0}),o.a.createElement(he,{title:"pAInting with GANs",subtitle:"Interactive AI Canvas - University project created fall 2022"}),o.a.createElement(_,null,o.a.createElement(De,{typeinfo:["Machine learning","Generative AI","PyTorch","Synthesize images"]}),o.a.createElement("h2",null,"SUMMARY"),o.a.createElement("p",null,"Implementation of NVIDIA's generative SPADE network in PyTorch. Based on the original paper of Park et.al. GauGAN is a generative network with a special normalization method SPADE, the generator takes as input a segmentation mask and a corresponding real image or noise vector in a high dimensional space and synthesize a photorealistic image as output. Depending on the dataset used during training it is capable of multi-modal image synthesis, which means that it can generate images in various different styles using the same input segmentation mask. In my implementation I trained the network on parts of COCO-Stuff dataset for about 160 epochs on my home computer which limit the rendering capabilities of the network. Beside the network I also created an interactive app hosted on streamlit, where you can draw your own doodles and turn them into semi-photorealistic images.",o.a.createElement("br",null),o.a.createElement("br",null),"This project was part of the course Artificial Intelligence for Interactive Media (TNM095) at Link\xf6ping's University. The full report can be found ",o.a.createElement(J,{reference:"https://github.com/engbergandreas/GauGAN/blob/main/Interactive_AI_canvas_TNM095.pdf",text:"here"}),"."),o.a.createElement(Pe,{embedID:"3p0-TzECcMg"}),o.a.createElement(xe,{code:"https://github.com/engbergandreas/GauGAN",demo:"https://engbergandreas-gaugan.streamlit.app/"}),o.a.createElement("h2",null,"Architecture"),o.a.createElement("p",null,"The network consists of an encoder, generator, and discriminator, all working together to produce photorealistic images given a noise vector and segmentation mask."),o.a.createElement("h3",null,"Generator"),o.a.createElement("h3",null,"Encoder"),o.a.createElement("h3",null,"Discriminator"),o.a.createElement("h3",null,"SPADE"),o.a.createElement("h2",null,"App"),o.a.createElement("p",null,"An interactive application was written in Python and hosted on ",o.a.createElement("i",null,"streamlit"),". It allows a user to draw semantic doodles in an interactive canvas and generate a photorealistic image in real time. Test the app yourself at ",o.a.createElement(J,{reference:"https://engbergandreas-gaugan.streamlit.app/",text:"https://engbergandreas-gaugan.streamlit.app/"}),". For ease of use and for better visualization each class in COCO-Stuff is mapped to a random color, furthermore, the number of classes is limited to make the interface more readable."),o.a.createElement(Ie,{source1:"../images/interactive_canvas/segmentation.png",description1:"Segmentation mask painted in the app.",source2:"../images/interactive_canvas/resultimg.png",description2:"Image synthesized by the network."}),o.a.createElement("h2",null,"Results"),o.a.createElement(we,{source:"../images/interactive_canvas/additional_result.png",description:"Result of synthesized images compared to real image."}),o.a.createElement(se,null)))},Qe=d.a.div(Je||(Je=Object(m.a)(["\n  \n"])));var Ze=function(){var e=Object(i.useState)("SHOW ALL"),t=Object(s.a)(e,2),n=t[0],a=t[1],r=Object(i.useState)(ie),l=Object(s.a)(r,2),c=l[0],m=l[1];return o.a.createElement(Qe,null,o.a.createElement(f,null),o.a.createElement(M.c,null,o.a.createElement(M.a,{path:"/portfolio",component:W}),o.a.createElement(M.a,{path:"/projects/interactive_canvas",component:Xe}),o.a.createElement(M.a,{path:"/projects/cloth_simulation",component:Te}),o.a.createElement(M.a,{path:"/projects/table_raid",component:Se}),o.a.createElement(M.a,{path:"/projects/matkoma",component:Ge}),o.a.createElement(M.a,{path:"/projects/soundflight",component:Ne}),o.a.createElement(M.a,{path:"/projects/legionen",component:We}),o.a.createElement(M.a,{path:"/projects/setfinder",component:Be}),o.a.createElement(M.a,{path:"/projects/proceduralterrain",component:ze}),o.a.createElement(M.a,{path:"/projects/proceduraltrees",component:He}),o.a.createElement(M.a,{path:"/projects/global_illumination",component:qe}),o.a.createElement(M.a,{path:"/projects/color_my_world",component:Ye}),o.a.createElement(M.a,{path:"/projects/facial_recognition",component:Ke}),o.a.createElement(M.a,{path:"/projects/bobross",component:Ve}),o.a.createElement(M.a,{path:"/projects"},o.a.createElement(N,{selectedCat:n,onClickFunction:function(e){a(e);var t=ie.filter((function(t){return t.categories.includes(e.toLowerCase())}));m("SHOW ALL"===e?ie:t)},projects:c})),o.a.createElement(M.a,{path:"/about",component:F}),o.a.createElement(M.a,{exact:!0,path:"",component:te}),o.a.createElement(M.a,{component:re})),o.a.createElement(O,null))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function $e(){var e=Object(M.f)().pathname;return Object(i.useEffect)((function(){window.scrollTo(0,0)}),[e]),null}c.a.render(o.a.createElement(o.a.StrictMode,null,o.a.createElement(u.a,{basemname:"/".concat("")},o.a.createElement($e,null),o.a.createElement(Ze,null))),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}},[[24,1,2]]]);
//# sourceMappingURL=main.ecc3fefa.chunk.js.map